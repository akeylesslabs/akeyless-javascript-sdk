/*
 * AKEYLESS Vault API
 * RESTFull API for interacting with AKEYLESS Vault API
 *
 * OpenAPI spec version: 0.1.1
 * Contact: refael@akeyless.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/com.akeyless.api_gateway.swagger/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/com.akeyless.api_gateway.swagger/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AkeylessVaultApi);
  }
}(this, function(expect, AkeylessVaultApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AkeylessVaultApi.DefaultApi();
  });

  describe('com.akeyless.api_gateway.swagger', function() {
    describe('DefaultApi', function() {
      describe('assocRoleAm', function() {
        it('should call assocRoleAm successfully', function(done) {
          // TODO: uncomment, update parameter values for assocRoleAm call and complete the assertions
          /*
          var roleName = "roleName_example";
          var amName = "amName_example";
          var token = "token_example";
          var opts = {};
          opts.subClaims = "subClaims_example";

          instance.assocRoleAm(roleName, amName, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('auth', function() {
        it('should call auth successfully', function(done) {
          // TODO: uncomment, update parameter values for auth call and complete the assertions
          /*
          var accessId = "accessId_example";
          var opts = {};
          opts.accessType = "accessType_example";
          opts.accessKey = "accessKey_example";
          opts.cloudId = "cloudId_example";
          opts.ldapProxyUrl = "ldapProxyUrl_example";

          instance.auth(accessId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configure', function() {
        it('should call configure successfully', function(done) {
          // TODO: uncomment, update parameter values for configure call and complete the assertions
          /*
          var accessId = "accessId_example";
          var opts = {};
          opts.accessKey = "accessKey_example";
          opts.accessType = "accessType_example";
          opts.ldapProxyUrl = "ldapProxyUrl_example";
          opts.azureAdObjectId = "azureAdObjectId_example";

          instance.configure(accessId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAuthMethod', function() {
        it('should call createAuthMethod successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthMethod call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";
          var opts = {};
          opts.accessExpires = "accessExpires_example";
          opts.boundIps = "boundIps_example";

          instance.createAuthMethod(name, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAuthMethodAwsIam', function() {
        it('should call createAuthMethodAwsIam successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthMethodAwsIam call and complete the assertions
          /*
          var name = "name_example";
          var boundAWSAccountId = "boundAWSAccountId_example";
          var token = "token_example";
          var opts = {};
          opts.accessExpires = "accessExpires_example";
          opts.boundIps = "boundIps_example";
          opts.stsUrl = "stsUrl_example";
          opts.boundArn = "boundArn_example";
          opts.boundRoleName = "boundRoleName_example";
          opts.boundRoleId = "boundRoleId_example";
          opts.boundResourceId = "boundResourceId_example";
          opts.boundUserName = "boundUserName_example";
          opts.boundUserId = "boundUserId_example";

          instance.createAuthMethodAwsIam(name, boundAWSAccountId, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAuthMethodAzureAd', function() {
        it('should call createAuthMethodAzureAd successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthMethodAzureAd call and complete the assertions
          /*
          var name = "name_example";
          var boundTenantId = "boundTenantId_example";
          var token = "token_example";
          var opts = {};
          opts.accessExpires = "accessExpires_example";
          opts.boundIps = "boundIps_example";
          opts.issuer = "issuer_example";
          opts.jwksUri = "jwksUri_example";
          opts.audience = "audience_example";
          opts.boundSpid = "boundSpid_example";
          opts.boundGroupId = "boundGroupId_example";
          opts.boundSubId = "boundSubId_example";
          opts.boundRgId = "boundRgId_example";
          opts.boundProviders = "boundProviders_example";
          opts.boundResourceTypes = "boundResourceTypes_example";
          opts.boundResourceNames = "boundResourceNames_example";
          opts.boundResourceId = "boundResourceId_example";

          instance.createAuthMethodAzureAd(name, boundTenantId, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAuthMethodLdap', function() {
        it('should call createAuthMethodLdap successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthMethodLdap call and complete the assertions
          /*
          var name = "name_example";
          var publicKeyFilePath = "publicKeyFilePath_example";
          var token = "token_example";
          var opts = {};
          opts.accessExpires = "accessExpires_example";
          opts.boundIps = "boundIps_example";

          instance.createAuthMethodLdap(name, publicKeyFilePath, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAuthMethodOauth2', function() {
        it('should call createAuthMethodOauth2 successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthMethodOauth2 call and complete the assertions
          /*
          var name = "name_example";
          var boundClientsIds = "boundClientsIds_example";
          var issuer = "issuer_example";
          var jwksUri = "jwksUri_example";
          var audience = "audience_example";
          var token = "token_example";
          var opts = {};
          opts.accessExpires = "accessExpires_example";
          opts.boundIps = "boundIps_example";

          instance.createAuthMethodOauth2(name, boundClientsIds, issuer, jwksUri, audience, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAuthMethodSaml', function() {
        it('should call createAuthMethodSaml successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthMethodSaml call and complete the assertions
          /*
          var name = "name_example";
          var idpMetadataUrl = "idpMetadataUrl_example";
          var token = "token_example";
          var opts = {};
          opts.accessExpires = "accessExpires_example";
          opts.boundIps = "boundIps_example";

          instance.createAuthMethodSaml(name, idpMetadataUrl, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDynamicSecret', function() {
        it('should call createDynamicSecret successfully', function(done) {
          // TODO: uncomment, update parameter values for createDynamicSecret call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";
          var opts = {};
          opts.metadata = "metadata_example";
          opts.key = "key_example";

          instance.createDynamicSecret(name, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createKey', function() {
        it('should call createKey successfully', function(done) {
          // TODO: uncomment, update parameter values for createKey call and complete the assertions
          /*
          var name = "name_example";
          var alg = "alg_example";
          var token = "token_example";
          var opts = {};
          opts.metadata = "metadata_example";
          opts.splitLevel = "splitLevel_example";
          opts.customerFrgId = "customerFrgId_example";

          instance.createKey(name, alg, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createPkiCertIssuer', function() {
        it('should call createPkiCertIssuer successfully', function(done) {
          // TODO: uncomment, update parameter values for createPkiCertIssuer call and complete the assertions
          /*
          var name = "name_example";
          var signerKeyName = "signerKeyName_example";
          var ttl = "ttl_example";
          var token = "token_example";
          var opts = {};
          opts.allowedDomains = "allowedDomains_example";
          opts.allowedUriSans = "allowedUriSans_example";
          opts.allowSubdomains = "allowSubdomains_example";
          opts.notEnforceHostnames = "notEnforceHostnames_example";
          opts.allowAnyName = "allowAnyName_example";
          opts.notRequireCn = "notRequireCn_example";
          opts.serverFlag = "serverFlag_example";
          opts.clientFlag = "clientFlag_example";
          opts.codeSigningFlag = "codeSigningFlag_example";
          opts.keyUsage = "keyUsage_example";
          opts.organizationUnits = "organizationUnits_example";
          opts.organizations = "organizations_example";
          opts.country = "country_example";
          opts.locality = "locality_example";
          opts.province = "province_example";
          opts.streetAddress = "streetAddress_example";
          opts.postalCode = "postalCode_example";
          opts.metadata = "metadata_example";

          instance.createPkiCertIssuer(name, signerKeyName, ttl, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRole', function() {
        it('should call createRole successfully', function(done) {
          // TODO: uncomment, update parameter values for createRole call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";
          var opts = {};
          opts.comment = "comment_example";

          instance.createRole(name, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSecret', function() {
        it('should call createSecret successfully', function(done) {
          // TODO: uncomment, update parameter values for createSecret call and complete the assertions
          /*
          var name = "name_example";
          var value = "value_example";
          var token = "token_example";
          var opts = {};
          opts.metadata = "metadata_example";
          opts.key = "key_example";
          opts.multiline = true;

          instance.createSecret(name, value, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSshCertIssuer', function() {
        it('should call createSshCertIssuer successfully', function(done) {
          // TODO: uncomment, update parameter values for createSshCertIssuer call and complete the assertions
          /*
          var name = "name_example";
          var signerKeyName = "signerKeyName_example";
          var allowedUsers = "allowedUsers_example";
          var ttl = "ttl_example";
          var token = "token_example";
          var opts = {};
          opts.principals = "principals_example";
          opts.extensions = "extensions_example";
          opts.metadata = "metadata_example";

          instance.createSshCertIssuer(name, signerKeyName, allowedUsers, ttl, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('decrypt', function() {
        it('should call decrypt successfully', function(done) {
          // TODO: uncomment, update parameter values for decrypt call and complete the assertions
          /*
          var keyName = "keyName_example";
          var ciphertext = "ciphertext_example";
          var token = "token_example";
          var opts = {};
          opts.encryptionContext = "encryptionContext_example";

          instance.decrypt(keyName, ciphertext, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('decryptFile', function() {
        it('should call decryptFile successfully', function(done) {
          // TODO: uncomment, update parameter values for decryptFile call and complete the assertions
          /*
          var keyName = "keyName_example";
          var _in = "_in_example";
          var token = "token_example";
          var opts = {};
          opts.out = "out_example";
          opts.encryptionContext = "encryptionContext_example";

          instance.decryptFile(keyName, _in, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('decryptPkcs1', function() {
        it('should call decryptPkcs1 successfully', function(done) {
          // TODO: uncomment, update parameter values for decryptPkcs1 call and complete the assertions
          /*
          var keyName = "keyName_example";
          var ciphertext = "ciphertext_example";
          var token = "token_example";

          instance.decryptPkcs1(keyName, ciphertext, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAssoc', function() {
        it('should call deleteAssoc successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAssoc call and complete the assertions
          /*
          var assocId = "assocId_example";
          var token = "token_example";

          instance.deleteAssoc(assocId, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAuthMethod', function() {
        it('should call deleteAuthMethod successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAuthMethod call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.deleteAuthMethod(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteItem', function() {
        it('should call deleteItem successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteItem call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.deleteItem(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRole', function() {
        it('should call deleteRole successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRole call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.deleteRole(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRoleRule', function() {
        it('should call deleteRoleRule successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRoleRule call and complete the assertions
          /*
          var roleName = "roleName_example";
          var path = "path_example";
          var token = "token_example";

          instance.deleteRoleRule(roleName, path, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('describeItem', function() {
        it('should call describeItem successfully', function(done) {
          // TODO: uncomment, update parameter values for describeItem call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.describeItem(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('encrypt', function() {
        it('should call encrypt successfully', function(done) {
          // TODO: uncomment, update parameter values for encrypt call and complete the assertions
          /*
          var keyName = "keyName_example";
          var plaintext = "plaintext_example";
          var token = "token_example";
          var opts = {};
          opts.encryptionContext = "encryptionContext_example";

          instance.encrypt(keyName, plaintext, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('encryptFile', function() {
        it('should call encryptFile successfully', function(done) {
          // TODO: uncomment, update parameter values for encryptFile call and complete the assertions
          /*
          var keyName = "keyName_example";
          var _in = "_in_example";
          var token = "token_example";
          var opts = {};
          opts.out = "out_example";
          opts.encryptionContext = "encryptionContext_example";

          instance.encryptFile(keyName, _in, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('encryptPkcs1', function() {
        it('should call encryptPkcs1 successfully', function(done) {
          // TODO: uncomment, update parameter values for encryptPkcs1 call and complete the assertions
          /*
          var keyName = "keyName_example";
          var plaintext = "plaintext_example";
          var token = "token_example";

          instance.encryptPkcs1(keyName, plaintext, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAuthMethod', function() {
        it('should call getAuthMethod successfully', function(done) {
          // TODO: uncomment, update parameter values for getAuthMethod call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.getAuthMethod(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCloudIdentity', function() {
        it('should call getCloudIdentity successfully', function(done) {
          // TODO: uncomment, update parameter values for getCloudIdentity call and complete the assertions
          /*
          var token = "token_example";
          var opts = {};
          opts.azureAdObjectId = "azureAdObjectId_example";
          opts.urlSafe = "urlSafe_example";

          instance.getCloudIdentity(token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDynamicSecretValue', function() {
        it('should call getDynamicSecretValue successfully', function(done) {
          // TODO: uncomment, update parameter values for getDynamicSecretValue call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.getDynamicSecretValue(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getKubeExecCreds', function() {
        it('should call getKubeExecCreds successfully', function(done) {
          // TODO: uncomment, update parameter values for getKubeExecCreds call and complete the assertions
          /*
          var certIssuerName = "certIssuerName_example";
          var keyFilePath = "keyFilePath_example";
          var token = "token_example";
          var opts = {};
          opts.commonName = "commonName_example";
          opts.altNames = "altNames_example";
          opts.uriSans = "uriSans_example";
          opts.outfile = "outfile_example";

          instance.getKubeExecCreds(certIssuerName, keyFilePath, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPkiCertificate', function() {
        it('should call getPkiCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for getPkiCertificate call and complete the assertions
          /*
          var certIssuerName = "certIssuerName_example";
          var keyFilePath = "keyFilePath_example";
          var token = "token_example";
          var opts = {};
          opts.commonName = "commonName_example";
          opts.altNames = "altNames_example";
          opts.uriSans = "uriSans_example";
          opts.outfile = "outfile_example";

          instance.getPkiCertificate(certIssuerName, keyFilePath, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRole', function() {
        it('should call getRole successfully', function(done) {
          // TODO: uncomment, update parameter values for getRole call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.getRole(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRsaPublic', function() {
        it('should call getRsaPublic successfully', function(done) {
          // TODO: uncomment, update parameter values for getRsaPublic call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.getRsaPublic(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSecretValue', function() {
        it('should call getSecretValue successfully', function(done) {
          // TODO: uncomment, update parameter values for getSecretValue call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";

          instance.getSecretValue(name, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSshCertificate', function() {
        it('should call getSshCertificate successfully', function(done) {
          // TODO: uncomment, update parameter values for getSshCertificate call and complete the assertions
          /*
          var certUsername = "certUsername_example";
          var certIssuerName = "certIssuerName_example";
          var publicKeyFilePath = "publicKeyFilePath_example";
          var token = "token_example";
          var opts = {};
          opts.outfile = "outfile_example";

          instance.getSshCertificate(certUsername, certIssuerName, publicKeyFilePath, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('help', function() {
        it('should call help successfully', function(done) {
          // TODO: uncomment help call and complete the assertions
          /*

          instance.help(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listAuthMethods', function() {
        it('should call listAuthMethods successfully', function(done) {
          // TODO: uncomment, update parameter values for listAuthMethods call and complete the assertions
          /*
          var token = "token_example";
          var opts = {};
          opts.paginationToken = "paginationToken_example";

          instance.listAuthMethods(token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listItems', function() {
        it('should call listItems successfully', function(done) {
          // TODO: uncomment, update parameter values for listItems call and complete the assertions
          /*
          var token = "token_example";
          var opts = {};
          opts.type = "type_example";
          opts.itemsTypes = "itemsTypes_example";
          opts.filter = "filter_example";
          opts.path = "path_example";
          opts.paginationToken = "paginationToken_example";

          instance.listItems(token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listRoles', function() {
        it('should call listRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for listRoles call and complete the assertions
          /*
          var token = "token_example";
          var opts = {};
          opts.paginationToken = "paginationToken_example";

          instance.listRoles(token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setRoleRule', function() {
        it('should call setRoleRule successfully', function(done) {
          // TODO: uncomment, update parameter values for setRoleRule call and complete the assertions
          /*
          var roleName = "roleName_example";
          var path = "path_example";
          var capability = "capability_example";
          var token = "token_example";

          instance.setRoleRule(roleName, path, capability, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('signPkcs1', function() {
        it('should call signPkcs1 successfully', function(done) {
          // TODO: uncomment, update parameter values for signPkcs1 call and complete the assertions
          /*
          var keyName = "keyName_example";
          var message = "message_example";
          var token = "token_example";

          instance.signPkcs1(keyName, message, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unconfigure', function() {
        it('should call unconfigure successfully', function(done) {
          // TODO: uncomment, update parameter values for unconfigure call and complete the assertions
          /*
          var token = "token_example";

          instance.unconfigure(token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('update', function() {
        it('should call update successfully', function(done) {
          // TODO: uncomment, update parameter values for update call and complete the assertions
          /*
          var token = "token_example";

          instance.update(token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateItem', function() {
        it('should call updateItem successfully', function(done) {
          // TODO: uncomment, update parameter values for updateItem call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";
          var opts = {};
          opts.newName = "newName_example";
          opts.newMetadata = "newMetadata_example";

          instance.updateItem(name, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateRole', function() {
        it('should call updateRole successfully', function(done) {
          // TODO: uncomment, update parameter values for updateRole call and complete the assertions
          /*
          var name = "name_example";
          var token = "token_example";
          var opts = {};
          opts.newName = "newName_example";
          opts.newComment = "newComment_example";

          instance.updateRole(name, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSecretVal', function() {
        it('should call updateSecretVal successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSecretVal call and complete the assertions
          /*
          var name = "name_example";
          var value = "value_example";
          var token = "token_example";
          var opts = {};
          opts.key = "key_example";
          opts.multiline = true;

          instance.updateSecretVal(name, value, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadPkcs12', function() {
        it('should call uploadPkcs12 successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadPkcs12 call and complete the assertions
          /*
          var name = "name_example";
          var _in = "_in_example";
          var passphrase = "passphrase_example";
          var token = "token_example";
          var opts = {};
          opts.metadata = "metadata_example";
          opts.splitLevel = "splitLevel_example";
          opts.customerFrgId = "customerFrgId_example";
          opts.cert = "cert_example";

          instance.uploadPkcs12(name, _in, passphrase, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadRsa', function() {
        it('should call uploadRsa successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadRsa call and complete the assertions
          /*
          var name = "name_example";
          var alg = "alg_example";
          var rsaKeyFilePath = "rsaKeyFilePath_example";
          var token = "token_example";
          var opts = {};
          opts.cert = "cert_example";
          opts.metadata = "metadata_example";
          opts.splitLevel = "splitLevel_example";
          opts.customerFrgId = "customerFrgId_example";

          instance.uploadRsa(name, alg, rsaKeyFilePath, token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('verifyPkcs1', function() {
        it('should call verifyPkcs1 successfully', function(done) {
          // TODO: uncomment, update parameter values for verifyPkcs1 call and complete the assertions
          /*
          var keyName = "keyName_example";
          var message = "message_example";
          var signature = "signature_example";
          var token = "token_example";

          instance.verifyPkcs1(keyName, message, signature, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AkeylessVaultApi.ReplyObj);
            expect(data.command).to.be.a('string');
            expect(data.command).to.be("");
            expect(data.response).to.be.a(Object);
            expect(data.response).to.be();
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
