/*
 * AKEYLESS Vault API
 * RESTFull API for interacting with AKEYLESS Vault API
 *
 * OpenAPI spec version: 0.1.1
 * Contact: refael@akeyless.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.akeyless.api_gateway.swagger/ApiClient', 'com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ErrorReplyObj', 'com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.akeyless.api_gateway.swagger.model/ErrorReplyObj'), require('../com.akeyless.api_gateway.swagger.model/ReplyObj'));
  } else {
    // Browser globals (root is window)
    if (!root.AkeylessVaultApi) {
      root.AkeylessVaultApi = {};
    }
    root.AkeylessVaultApi.DefaultApi = factory(root.AkeylessVaultApi.ApiClient, root.AkeylessVaultApi.ErrorReplyObj, root.AkeylessVaultApi.ReplyObj);
  }
}(this, function(ApiClient, ErrorReplyObj, ReplyObj) {
  'use strict';

  /**
   * Default service.
   * @module com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi
   * @version 0.1.1
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi
   * @class
   * @param {module:com.akeyless.api_gateway.swagger/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:com.akeyless.api_gateway.swagger/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assocRoleAm operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~assocRoleAmCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an association between role and auth method
     * Create an association between role and auth method Options:   role-name -    The role name to associate   am-name -    The auth method name to associate   sub-claims -    key/val of sub claims, ex. group=admins,developers   token -    Access token
     * @param {String} roleName The role name to associate
     * @param {String} amName The auth method name to associate
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.subClaims key/val of sub claims, ex. group=admins,developers
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~assocRoleAmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.assocRoleAm = function(roleName, amName, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling assocRoleAm");
      }

      // verify the required parameter 'amName' is set
      if (amName === undefined || amName === null) {
        throw new Error("Missing the required parameter 'amName' when calling assocRoleAm");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling assocRoleAm");
      }


      var pathParams = {
      };
      var queryParams = {
        'role-name': roleName,
        'am-name': amName,
        'sub-claims': opts['subClaims'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/assoc-role-am', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the auth operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~authCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate to the service and returns a token to be used as a profile to execute the CLI without the need for re-authentication
     * Authenticate to the service and returns a token to be used as a profile to execute the CLI without the need for re-authentication Options:   access-id -    Access ID   access-type -    Access Type (access_key/password/saml/ldap/azure_ad/aws_iam)   access-key -    Access key (relevant only for access-type=access_key)   admin-password -    Password (relevant only for access-type=password)   admin-email -    Email (relevant only for access-type=password)   cloud-id -    The cloued identity (relevant only for access-type=azure_ad,awd_im,auid)   ldap_proxy_url -    Address URL for LDAP proxy (relevant only for access-type=ldap)
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessId Access ID
     * @param {String} opts.accessType Access Type (access_key/password/saml/ldap/azure_ad/aws_iam)
     * @param {String} opts.accessKey Access key (relevant only for access-type=access_key)
     * @param {String} opts.adminPassword Password (relevant only for access-type=password)
     * @param {String} opts.adminEmail Email (relevant only for access-type=password)
     * @param {String} opts.cloudId The cloued identity (relevant only for access-type=azure_ad,awd_im,auid)
     * @param {String} opts.ldapProxyUrl Address URL for LDAP proxy (relevant only for access-type=ldap)
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~authCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.auth = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'access-id': opts['accessId'],
        'access-type': opts['accessType'],
        'access-key': opts['accessKey'],
        'admin-password': opts['adminPassword'],
        'admin-email': opts['adminEmail'],
        'cloud-id': opts['cloudId'],
        'ldap_proxy_url': opts['ldapProxyUrl'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configure operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~configureCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure client profile.
     * Configure client profile. Options:   access-id -    Access ID   access-key -    Access Key   admin-password -    Password (relevant only for access-type=password)   admin-email -    Email (relevant only for access-type=password)   access-type -    Access Type (access_key/password/azure_ad/saml/ldap/aws_iam)   ldap_proxy_url -    Address URL for ldap proxy (relevant only for access-type=ldap)   azure_ad_object_id -    Azure Active Directory ObjectId (relevant only for access-type=azure_ad)
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessId Access ID
     * @param {String} opts.accessKey Access Key
     * @param {String} opts.adminPassword Password (relevant only for access-type=password)
     * @param {String} opts.adminEmail Email (relevant only for access-type=password)
     * @param {String} opts.accessType Access Type (access_key/password/azure_ad/saml/ldap/aws_iam)
     * @param {String} opts.ldapProxyUrl Address URL for ldap proxy (relevant only for access-type=ldap)
     * @param {String} opts.azureAdObjectId Azure Active Directory ObjectId (relevant only for access-type=azure_ad)
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~configureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.configure = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'access-id': opts['accessId'],
        'access-key': opts['accessKey'],
        'admin-password': opts['adminPassword'],
        'admin-email': opts['adminEmail'],
        'access-type': opts['accessType'],
        'ldap_proxy_url': opts['ldapProxyUrl'],
        'azure_ad_object_id': opts['azureAdObjectId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/configure', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethod operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Auth Method in the account
     * Create a new Auth Method in the account Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist with the IPs that the access is restricted to   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessExpires Access expiration date in Unix timestamp (select 0 for access without expiry date)
     * @param {String} opts.boundIps A CIDR whitelist with the IPs that the access is restricted to
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createAuthMethod = function(name, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createAuthMethod");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createAuthMethod");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'access-expires': opts['accessExpires'],
        'bound-ips': opts['boundIps'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-auth-method', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodAwsIam operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodAwsIamCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Auth Method that will be able to authenticate using AWS IAM credentials
     * Create a new Auth Method that will be able to authenticate using AWS IAM credentials Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   sts-url -    sts URL   bound-AWS-account-id -    A list of AWS account-IDs that the access is restricted to   bound-arn -    A list of full arns that the access is restricted to   bound-role-name -    A list of full role-name that the access is restricted to   bound-role-id -    A list of full role ids that the access is restricted to   bound-resource-id -    A list of full resource ids that the access is restricted to   bound-user-name -    A list of full user-name that the access is restricted to   bound-user-id -    A list of full user ids that the access is restricted to   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} boundAWSAccountId A list of AWS account-IDs that the access is restricted to
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessExpires Access expiration date in Unix timestamp (select 0 for access without expiry date)
     * @param {String} opts.boundIps A CIDR whitelist of the IPs that the access is restricted to
     * @param {String} opts.stsUrl sts URL
     * @param {String} opts.boundArn A list of full arns that the access is restricted to
     * @param {String} opts.boundRoleName A list of full role-name that the access is restricted to
     * @param {String} opts.boundRoleId A list of full role ids that the access is restricted to
     * @param {String} opts.boundResourceId A list of full resource ids that the access is restricted to
     * @param {String} opts.boundUserName A list of full user-name that the access is restricted to
     * @param {String} opts.boundUserId A list of full user ids that the access is restricted to
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodAwsIamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createAuthMethodAwsIam = function(name, boundAWSAccountId, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createAuthMethodAwsIam");
      }

      // verify the required parameter 'boundAWSAccountId' is set
      if (boundAWSAccountId === undefined || boundAWSAccountId === null) {
        throw new Error("Missing the required parameter 'boundAWSAccountId' when calling createAuthMethodAwsIam");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createAuthMethodAwsIam");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'access-expires': opts['accessExpires'],
        'bound-ips': opts['boundIps'],
        'sts-url': opts['stsUrl'],
        'bound-AWS-account-id': boundAWSAccountId,
        'bound-arn': opts['boundArn'],
        'bound-role-name': opts['boundRoleName'],
        'bound-role-id': opts['boundRoleId'],
        'bound-resource-id': opts['boundResourceId'],
        'bound-user-name': opts['boundUserName'],
        'bound-user-id': opts['boundUserId'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-auth-method-aws-iam', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodAzureAd operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodAzureAdCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Auth Method that will be able to authenticate using Azure Active Directory credentials
     * Create a new Auth Method that will be able to authenticate using Azure Active Directory credentials Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   bound-tenant-id -    The Azure tenant id that the access is restricted to   issuer -    Issuer URL   jwks-uri -    The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.   audience -    The audience in the JWT   bound-spid -    A list of service principal IDs that the access is restricted to   bound-group-id -    A list of group ids that the access is restricted to   bound-sub-id -    A list of subscription ids that the access is restricted to   bound-rg-id -    A list of resource groups that the access is restricted to   bound-providers -    A list of resource providers that the access is restricted to (e.g, Microsoft.Compute, Microsoft.ManagedIdentity, etc)   bound-resource-types -    A list of resource types that the access is restricted to (e.g, virtualMachines, userAssignedIdentities, etc)   bound-resource-names -    A list of resource names that the access is restricted to (e.g, a virtual machine name, scale set name, etc).   bound-resource-id -    A list of full resource ids that the access is restricted to   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} boundTenantId The Azure tenant id that the access is restricted to
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessExpires Access expiration date in Unix timestamp (select 0 for access without expiry date)
     * @param {String} opts.boundIps A CIDR whitelist of the IPs that the access is restricted to
     * @param {String} opts.issuer Issuer URL
     * @param {String} opts.jwksUri The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.
     * @param {String} opts.audience The audience in the JWT
     * @param {String} opts.boundSpid A list of service principal IDs that the access is restricted to
     * @param {String} opts.boundGroupId A list of group ids that the access is restricted to
     * @param {String} opts.boundSubId A list of subscription ids that the access is restricted to
     * @param {String} opts.boundRgId A list of resource groups that the access is restricted to
     * @param {String} opts.boundProviders A list of resource providers that the access is restricted to (e.g, Microsoft.Compute, Microsoft.ManagedIdentity, etc)
     * @param {String} opts.boundResourceTypes A list of resource types that the access is restricted to (e.g, virtualMachines, userAssignedIdentities, etc)
     * @param {String} opts.boundResourceNames A list of resource names that the access is restricted to (e.g, a virtual machine name, scale set name, etc).
     * @param {String} opts.boundResourceId A list of full resource ids that the access is restricted to
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodAzureAdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createAuthMethodAzureAd = function(name, boundTenantId, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createAuthMethodAzureAd");
      }

      // verify the required parameter 'boundTenantId' is set
      if (boundTenantId === undefined || boundTenantId === null) {
        throw new Error("Missing the required parameter 'boundTenantId' when calling createAuthMethodAzureAd");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createAuthMethodAzureAd");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'access-expires': opts['accessExpires'],
        'bound-ips': opts['boundIps'],
        'bound-tenant-id': boundTenantId,
        'issuer': opts['issuer'],
        'jwks-uri': opts['jwksUri'],
        'audience': opts['audience'],
        'bound-spid': opts['boundSpid'],
        'bound-group-id': opts['boundGroupId'],
        'bound-sub-id': opts['boundSubId'],
        'bound-rg-id': opts['boundRgId'],
        'bound-providers': opts['boundProviders'],
        'bound-resource-types': opts['boundResourceTypes'],
        'bound-resource-names': opts['boundResourceNames'],
        'bound-resource-id': opts['boundResourceId'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-auth-method-azure-ad', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodLdap operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodLdapCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Auth Method that will be able to authenticate using LDAP
     * Create a new Auth Method that will be able to authenticate using LDAP Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   public-key-file-path -    A public key generated for LDAP authentication method on Akeyless [RSA2048]   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} publicKeyFilePath A public key generated for LDAP authentication method on Akeyless [RSA2048]
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessExpires Access expiration date in Unix timestamp (select 0 for access without expiry date)
     * @param {String} opts.boundIps A CIDR whitelist of the IPs that the access is restricted to
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodLdapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createAuthMethodLdap = function(name, publicKeyFilePath, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createAuthMethodLdap");
      }

      // verify the required parameter 'publicKeyFilePath' is set
      if (publicKeyFilePath === undefined || publicKeyFilePath === null) {
        throw new Error("Missing the required parameter 'publicKeyFilePath' when calling createAuthMethodLdap");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createAuthMethodLdap");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'access-expires': opts['accessExpires'],
        'bound-ips': opts['boundIps'],
        'public-key-file-path': publicKeyFilePath,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-auth-method-ldap', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodOauth2 operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodOauth2Callback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Auth Method that will be able to authenticate using OpenId/OAuth2
     * Create a new Auth Method that will be able to authenticate using OpenId/OAuth2 Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   bound-clients-ids -    The clients ids that the access is restricted to   issuer -    Issuer URL   jwks-uri -    The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.   audience -    The audience in the JWT   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} boundClientsIds The clients ids that the access is restricted to
     * @param {String} issuer Issuer URL
     * @param {String} jwksUri The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.
     * @param {String} audience The audience in the JWT
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessExpires Access expiration date in Unix timestamp (select 0 for access without expiry date)
     * @param {String} opts.boundIps A CIDR whitelist of the IPs that the access is restricted to
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodOauth2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createAuthMethodOauth2 = function(name, boundClientsIds, issuer, jwksUri, audience, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createAuthMethodOauth2");
      }

      // verify the required parameter 'boundClientsIds' is set
      if (boundClientsIds === undefined || boundClientsIds === null) {
        throw new Error("Missing the required parameter 'boundClientsIds' when calling createAuthMethodOauth2");
      }

      // verify the required parameter 'issuer' is set
      if (issuer === undefined || issuer === null) {
        throw new Error("Missing the required parameter 'issuer' when calling createAuthMethodOauth2");
      }

      // verify the required parameter 'jwksUri' is set
      if (jwksUri === undefined || jwksUri === null) {
        throw new Error("Missing the required parameter 'jwksUri' when calling createAuthMethodOauth2");
      }

      // verify the required parameter 'audience' is set
      if (audience === undefined || audience === null) {
        throw new Error("Missing the required parameter 'audience' when calling createAuthMethodOauth2");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createAuthMethodOauth2");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'access-expires': opts['accessExpires'],
        'bound-ips': opts['boundIps'],
        'bound-clients-ids': boundClientsIds,
        'issuer': issuer,
        'jwks-uri': jwksUri,
        'audience': audience,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-auth-method-oauth2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodSaml operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodSamlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Auth Method that will be able to authenticate using SAML
     * Create a new Auth Method that will be able to authenticate using SAML Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   idp-metadata-url -    IDP metadata url   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} idpMetadataUrl IDP metadata url
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessExpires Access expiration date in Unix timestamp (select 0 for access without expiry date)
     * @param {String} opts.boundIps A CIDR whitelist of the IPs that the access is restricted to
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createAuthMethodSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createAuthMethodSaml = function(name, idpMetadataUrl, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createAuthMethodSaml");
      }

      // verify the required parameter 'idpMetadataUrl' is set
      if (idpMetadataUrl === undefined || idpMetadataUrl === null) {
        throw new Error("Missing the required parameter 'idpMetadataUrl' when calling createAuthMethodSaml");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createAuthMethodSaml");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'access-expires': opts['accessExpires'],
        'bound-ips': opts['boundIps'],
        'idp-metadata-url': idpMetadataUrl,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-auth-method-saml', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDynamicSecret operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createDynamicSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new dynamic secret item
     * Creates a new dynamic secret item Options:   name -    Dynamic secret name   metadata -    Metadata about the dynamic secret   key -    The name of a key that used to encrypt the dynamic secret values (if empty, the account default protectionKey key will be used)   token -    Access token
     * @param {String} name Dynamic secret name
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.metadata Metadata about the dynamic secret
     * @param {String} opts.key The name of a key that used to encrypt the dynamic secret values (if empty, the account default protectionKey key will be used)
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createDynamicSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createDynamicSecret = function(name, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createDynamicSecret");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createDynamicSecret");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'metadata': opts['metadata'],
        'key': opts['key'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-dynamic-secret', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createKey operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new key
     * Creates a new key Options:   name -    Key name   alg -    Key type. options- [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048]   metadata -    Metadata about the key   split-level -    The number of fragments that the item will be split into (not includes customer fragment)   customer-frg-id -    The customer fragment ID that will be used to create the key (if empty, the key will be created independently of a customer fragment)   token -    Access token
     * @param {String} name Key name
     * @param {String} alg Key type. options- [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048]
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.metadata Metadata about the key
     * @param {String} opts.splitLevel The number of fragments that the item will be split into (not includes customer fragment)
     * @param {String} opts.customerFrgId The customer fragment ID that will be used to create the key (if empty, the key will be created independently of a customer fragment)
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createKey = function(name, alg, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createKey");
      }

      // verify the required parameter 'alg' is set
      if (alg === undefined || alg === null) {
        throw new Error("Missing the required parameter 'alg' when calling createKey");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createKey");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'alg': alg,
        'metadata': opts['metadata'],
        'split-level': opts['splitLevel'],
        'customer-frg-id': opts['customerFrgId'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-key', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPkiCertIssuer operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createPkiCertIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new PKI certificate issuer
     * Creates a new PKI certificate issuer Options:   name -    PKI certificate issuer name   signer-key-name -    A key to sign the certificate with   allowed-domains -    A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)   allowed-uri-sans -    A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list)   allow-subdomains -    If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains   not-enforce-hostnames -    If set, any names are allowed for CN and SANs in the certificate and not only a valid host name   allow-any-name -    If set, clients can request certificates for any CN   not-require-cn -    If set, clients can request certificates without a CN   server-flag -    If set, certificates will be flagged for server auth use   client-flag -    If set, certificates will be flagged for client auth use   code-signing-flag -    If set, certificates will be flagged for code signing use   key-usage -    A comma-separated string or list of key usages   organization-units -    A comma-separated list of organizational units (OU) that will be set in the issued certificate   organizations -    A comma-separated list of organizations (O) that will be set in the issued certificate   country -    A comma-separated list of the country that will be set in the issued certificate   locality -    A comma-separated list of the locality that will be set in the issued certificate   province -    A comma-separated list of the province that will be set in the issued certificate   street-address -    A comma-separated list of the street address that will be set in the issued certificate   postal-code -    A comma-separated list of the postal code that will be set in the issued certificate   ttl -    The requested Time To Live for the certificate, use second units   metadata -    A metadata about the issuer   token -    Access token
     * @param {String} name PKI certificate issuer name
     * @param {String} signerKeyName A key to sign the certificate with
     * @param {String} ttl The requested Time To Live for the certificate, use second units
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.allowedDomains A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)
     * @param {String} opts.allowedUriSans A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list)
     * @param {String} opts.allowSubdomains If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains
     * @param {String} opts.notEnforceHostnames If set, any names are allowed for CN and SANs in the certificate and not only a valid host name
     * @param {String} opts.allowAnyName If set, clients can request certificates for any CN
     * @param {String} opts.notRequireCn If set, clients can request certificates without a CN
     * @param {String} opts.serverFlag If set, certificates will be flagged for server auth use
     * @param {String} opts.clientFlag If set, certificates will be flagged for client auth use
     * @param {String} opts.codeSigningFlag If set, certificates will be flagged for code signing use
     * @param {String} opts.keyUsage A comma-separated string or list of key usages
     * @param {String} opts.organizationUnits A comma-separated list of organizational units (OU) that will be set in the issued certificate
     * @param {String} opts.organizations A comma-separated list of organizations (O) that will be set in the issued certificate
     * @param {String} opts.country A comma-separated list of the country that will be set in the issued certificate
     * @param {String} opts.locality A comma-separated list of the locality that will be set in the issued certificate
     * @param {String} opts.province A comma-separated list of the province that will be set in the issued certificate
     * @param {String} opts.streetAddress A comma-separated list of the street address that will be set in the issued certificate
     * @param {String} opts.postalCode A comma-separated list of the postal code that will be set in the issued certificate
     * @param {String} opts.metadata A metadata about the issuer
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createPkiCertIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createPkiCertIssuer = function(name, signerKeyName, ttl, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createPkiCertIssuer");
      }

      // verify the required parameter 'signerKeyName' is set
      if (signerKeyName === undefined || signerKeyName === null) {
        throw new Error("Missing the required parameter 'signerKeyName' when calling createPkiCertIssuer");
      }

      // verify the required parameter 'ttl' is set
      if (ttl === undefined || ttl === null) {
        throw new Error("Missing the required parameter 'ttl' when calling createPkiCertIssuer");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createPkiCertIssuer");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'signer-key-name': signerKeyName,
        'allowed-domains': opts['allowedDomains'],
        'allowed-uri-sans': opts['allowedUriSans'],
        'allow-subdomains': opts['allowSubdomains'],
        'not-enforce-hostnames': opts['notEnforceHostnames'],
        'allow-any-name': opts['allowAnyName'],
        'not-require-cn': opts['notRequireCn'],
        'server-flag': opts['serverFlag'],
        'client-flag': opts['clientFlag'],
        'code-signing-flag': opts['codeSigningFlag'],
        'key-usage': opts['keyUsage'],
        'organization-units': opts['organizationUnits'],
        'organizations': opts['organizations'],
        'country': opts['country'],
        'locality': opts['locality'],
        'province': opts['province'],
        'street-address': opts['streetAddress'],
        'postal-code': opts['postalCode'],
        'ttl': ttl,
        'metadata': opts['metadata'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-pki-cert-issuer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new role
     * Creates a new role Options:   name -    Role name   comment -    Comment about the role   token -    Access token
     * @param {String} name Role name
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.comment Comment about the role
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createRole = function(name, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createRole");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createRole");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'comment': opts['comment'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-role', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSecret operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new secret item
     * Creates a new secret item Options:   name -    Secret name   value -    The secret value   metadata -    Metadata about the secret   key -    The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)   multiline -    The provided value is a multiline value (separated by '\\n')   token -    Access token
     * @param {String} name Secret name
     * @param {String} value The secret value
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.metadata Metadata about the secret
     * @param {String} opts.key The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
     * @param {Boolean} opts.multiline The provided value is a multiline value (separated by '\\n')
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createSecret = function(name, value, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createSecret");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling createSecret");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createSecret");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'value': value,
        'metadata': opts['metadata'],
        'key': opts['key'],
        'multiline': opts['multiline'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-secret', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSshCertIssuer operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createSshCertIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new SSH certificate issuer
     * Creates a new SSH certificate issuer Options:   name -    SSH certificate issuer name   signer-key-name -    A key to sign the certificate with   allowed-users -    Users allowed to fetch the certificate, ex. root,ubuntu   principals -    Signed certificates with principal, ex. example_role1,example_role2   extensions -    Signed certificates with extensions, ex. permit-port-forwarding=\"\"   ttl -    The requested Time To Live for the certificate, use second units   metadata -    A metadata about the issuer   token -    Access token
     * @param {String} name SSH certificate issuer name
     * @param {String} signerKeyName A key to sign the certificate with
     * @param {String} allowedUsers Users allowed to fetch the certificate, ex. root,ubuntu
     * @param {String} ttl The requested Time To Live for the certificate, use second units
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.principals Signed certificates with principal, ex. example_role1,example_role2
     * @param {String} opts.extensions Signed certificates with extensions, ex. permit-port-forwarding=\"\"
     * @param {String} opts.metadata A metadata about the issuer
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~createSshCertIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.createSshCertIssuer = function(name, signerKeyName, allowedUsers, ttl, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createSshCertIssuer");
      }

      // verify the required parameter 'signerKeyName' is set
      if (signerKeyName === undefined || signerKeyName === null) {
        throw new Error("Missing the required parameter 'signerKeyName' when calling createSshCertIssuer");
      }

      // verify the required parameter 'allowedUsers' is set
      if (allowedUsers === undefined || allowedUsers === null) {
        throw new Error("Missing the required parameter 'allowedUsers' when calling createSshCertIssuer");
      }

      // verify the required parameter 'ttl' is set
      if (ttl === undefined || ttl === null) {
        throw new Error("Missing the required parameter 'ttl' when calling createSshCertIssuer");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createSshCertIssuer");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'signer-key-name': signerKeyName,
        'allowed-users': allowedUsers,
        'principals': opts['principals'],
        'extensions': opts['extensions'],
        'ttl': ttl,
        'metadata': opts['metadata'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/create-ssh-cert-issuer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decrypt operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~decryptCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decrypts ciphertext into plaintext by using an AES key
     * Decrypts ciphertext into plaintext by using an AES key Options:   key-name -    The name of the key to use in the decryption process   ciphertext -    Ciphertext to be decrypted in base64 encoded format   encryption-context -    The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail   token -    Access token
     * @param {String} keyName The name of the key to use in the decryption process
     * @param {String} ciphertext Ciphertext to be decrypted in base64 encoded format
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.encryptionContext The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~decryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.decrypt = function(keyName, ciphertext, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling decrypt");
      }

      // verify the required parameter 'ciphertext' is set
      if (ciphertext === undefined || ciphertext === null) {
        throw new Error("Missing the required parameter 'ciphertext' when calling decrypt");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling decrypt");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'ciphertext': ciphertext,
        'encryption-context': opts['encryptionContext'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/decrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptFile operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~decryptFileCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decrypts a file by using an AES key
     * Decrypts a file by using an AES key Options:   key-name -    The name of the key to use in the decryption process   in -    Path to the file to be decrypted. If not provided, the content will be taken from stdin   out -    Path to the output file. If not provided, the output will be sent to stdout   encryption-context -    The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail   token -    Access token
     * @param {String} keyName The name of the key to use in the decryption process
     * @param {String} _in Path to the file to be decrypted. If not provided, the content will be taken from stdin
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.out Path to the output file. If not provided, the output will be sent to stdout
     * @param {String} opts.encryptionContext The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~decryptFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.decryptFile = function(keyName, _in, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling decryptFile");
      }

      // verify the required parameter '_in' is set
      if (_in === undefined || _in === null) {
        throw new Error("Missing the required parameter '_in' when calling decryptFile");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling decryptFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'in': _in,
        'out': opts['out'],
        'encryption-context': opts['encryptionContext'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/decrypt-file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptPkcs1 operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~decryptPkcs1Callback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decrypts a plaintext using RSA and the padding scheme from PKCS#1 v1.5
     * Decrypts a plaintext using RSA and the padding scheme from PKCS#1 v1.5 Options:   key-name -    The name of the RSA key to use in the decryption process   ciphertext -    Ciphertext to be decrypted in base64 encoded format   token -    Access token
     * @param {String} keyName The name of the RSA key to use in the decryption process
     * @param {String} ciphertext Ciphertext to be decrypted in base64 encoded format
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~decryptPkcs1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.decryptPkcs1 = function(keyName, ciphertext, token, callback) {
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling decryptPkcs1");
      }

      // verify the required parameter 'ciphertext' is set
      if (ciphertext === undefined || ciphertext === null) {
        throw new Error("Missing the required parameter 'ciphertext' when calling decryptPkcs1");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling decryptPkcs1");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'ciphertext': ciphertext,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/decrypt-pkcs1', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssoc operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteAssocCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an association between role and auth method
     * Delete an association between role and auth method Options:   assoc-id -    The association id to be deleted   token -    Access token
     * @param {String} assocId The association id to be deleted
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteAssocCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.deleteAssoc = function(assocId, token, callback) {
      var postBody = null;

      // verify the required parameter 'assocId' is set
      if (assocId === undefined || assocId === null) {
        throw new Error("Missing the required parameter 'assocId' when calling deleteAssoc");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteAssoc");
      }


      var pathParams = {
      };
      var queryParams = {
        'assoc-id': assocId,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/delete-assoc', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthMethod operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the Auth Method
     * Delete the Auth Method Options:   name -    Auth Method name   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.deleteAuthMethod = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthMethod");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteAuthMethod");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/delete-auth-method', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItem operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an item or an item version
     * Delete an item or an item version Options:   name -    Item name   token -    Access token
     * @param {String} name Item name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.deleteItem = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteItem");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteItem");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/delete-item', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * Delete a role Options:   name -    Role name   token -    Access token
     * @param {String} name Role name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.deleteRole = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteRole");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteRole");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/delete-role', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleRule operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteRoleRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rule from a role
     * Delete a rule from a role Options:   role-name -    The role name to be updated   path -    The path the rule refers to   token -    Access token
     * @param {String} roleName The role name to be updated
     * @param {String} path The path the rule refers to
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~deleteRoleRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.deleteRoleRule = function(roleName, path, token, callback) {
      var postBody = null;

      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling deleteRoleRule");
      }

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteRoleRule");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteRoleRule");
      }


      var pathParams = {
      };
      var queryParams = {
        'role-name': roleName,
        'path': path,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/delete-role-rule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the describeItem operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~describeItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the item details
     * Returns the item details Options:   name -    Item name   token -    Access token
     * @param {String} name Item name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~describeItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.describeItem = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling describeItem");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling describeItem");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/describe-item', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encrypt operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~encryptCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypts plaintext into ciphertext by using an AES key
     * Encrypts plaintext into ciphertext by using an AES key Options:   key-name -    The name of the key to use in the encryption process   plaintext -    Data to be encrypted   encryption-context -    name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail   token -    Access token
     * @param {String} keyName The name of the key to use in the encryption process
     * @param {String} plaintext Data to be encrypted
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.encryptionContext name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~encryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.encrypt = function(keyName, plaintext, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling encrypt");
      }

      // verify the required parameter 'plaintext' is set
      if (plaintext === undefined || plaintext === null) {
        throw new Error("Missing the required parameter 'plaintext' when calling encrypt");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling encrypt");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'plaintext': plaintext,
        'encryption-context': opts['encryptionContext'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/encrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptFile operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~encryptFileCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypts a file by using an AES key
     * Encrypts a file by using an AES key Options:   key-name -    The name of the key to use in the encryption process   in -    Path to the file to be encrypted. If not provided, the content will be taken from stdin   out -    Path to the output file. If not provided, the output will be sent to stdout   encryption-context -    name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail   token -    Access token
     * @param {String} keyName The name of the key to use in the encryption process
     * @param {String} _in Path to the file to be encrypted. If not provided, the content will be taken from stdin
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.out Path to the output file. If not provided, the output will be sent to stdout
     * @param {String} opts.encryptionContext name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~encryptFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.encryptFile = function(keyName, _in, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling encryptFile");
      }

      // verify the required parameter '_in' is set
      if (_in === undefined || _in === null) {
        throw new Error("Missing the required parameter '_in' when calling encryptFile");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling encryptFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'in': _in,
        'out': opts['out'],
        'encryption-context': opts['encryptionContext'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/encrypt-file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptPkcs1 operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~encryptPkcs1Callback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypts the given message with RSA and the padding scheme from PKCS#1 v1.5
     * Encrypts the given message with RSA and the padding scheme from PKCS#1 v1.5 Options:   key-name -    The name of the RSA key to use in the encryption process   plaintext -    Data to be encrypted   token -    Access token
     * @param {String} keyName The name of the RSA key to use in the encryption process
     * @param {String} plaintext Data to be encrypted
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~encryptPkcs1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.encryptPkcs1 = function(keyName, plaintext, token, callback) {
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling encryptPkcs1");
      }

      // verify the required parameter 'plaintext' is set
      if (plaintext === undefined || plaintext === null) {
        throw new Error("Missing the required parameter 'plaintext' when calling encryptPkcs1");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling encryptPkcs1");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'plaintext': plaintext,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/encrypt-pkcs1', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthMethod operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an information about the Auth Method
     * Returns an information about the Auth Method Options:   name -    Auth Method name   token -    Access token
     * @param {String} name Auth Method name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getAuthMethod = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAuthMethod");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAuthMethod");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-auth-method', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudIdentity operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getCloudIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cloud Identity Token (relevant only for access-type=azure_ad,aws_iam)
     * Get Cloud Identity Token (relevant only for access-type=azure_ad,aws_iam) Options:   azure_ad_object_id -    Azure Active Directory ObjectId (relevant only for access-type=azure_ad)   url_safe -    escapes the token so it can be safely placed inside a URL query   token -    Access token
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.azureAdObjectId Azure Active Directory ObjectId (relevant only for access-type=azure_ad)
     * @param {String} opts.urlSafe escapes the token so it can be safely placed inside a URL query
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getCloudIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getCloudIdentity = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCloudIdentity");
      }


      var pathParams = {
      };
      var queryParams = {
        'azure_ad_object_id': opts['azureAdObjectId'],
        'url_safe': opts['urlSafe'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-cloud-identity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDynamicSecretValue operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getDynamicSecretValueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dynamic secret value
     * Get dynamic secret value Options:   name -    Dynamic secret name   token -    Access token
     * @param {String} name Dynamic secret name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getDynamicSecretValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getDynamicSecretValue = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getDynamicSecretValue");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getDynamicSecretValue");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-dynamic-secret-value', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKubeExecCreds operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getKubeExecCredsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credentials for authentication with Kubernetes cluster based on a PKI Cert Issuer
     * Get credentials for authentication with Kubernetes cluster based on a PKI Cert Issuer Options:   cert-issuer-name -    The name of the PKI certificate issuer   key-file-path -    The client public or private key file path (in case of a private key, it will be use to extract the public key)   common-name -    The common name to be included in the PKI certificate   alt-names -    The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   uri-sans -    The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   outfile -    Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension   token -    Access token
     * @param {String} certIssuerName The name of the PKI certificate issuer
     * @param {String} keyFilePath The client public or private key file path (in case of a private key, it will be use to extract the public key)
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.commonName The common name to be included in the PKI certificate
     * @param {String} opts.altNames The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
     * @param {String} opts.uriSans The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
     * @param {String} opts.outfile Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getKubeExecCredsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getKubeExecCreds = function(certIssuerName, keyFilePath, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'certIssuerName' is set
      if (certIssuerName === undefined || certIssuerName === null) {
        throw new Error("Missing the required parameter 'certIssuerName' when calling getKubeExecCreds");
      }

      // verify the required parameter 'keyFilePath' is set
      if (keyFilePath === undefined || keyFilePath === null) {
        throw new Error("Missing the required parameter 'keyFilePath' when calling getKubeExecCreds");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getKubeExecCreds");
      }


      var pathParams = {
      };
      var queryParams = {
        'cert-issuer-name': certIssuerName,
        'key-file-path': keyFilePath,
        'common-name': opts['commonName'],
        'alt-names': opts['altNames'],
        'uri-sans': opts['uriSans'],
        'outfile': opts['outfile'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-kube-exec-creds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPkiCertificate operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getPkiCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates PKI certificate
     * Generates PKI certificate Options:   cert-issuer-name -    The name of the PKI certificate issuer   key-file-path -    The client public or private key file path (in case of a private key, it will be use to extract the public key)   common-name -    The common name to be included in the PKI certificate   alt-names -    The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   uri-sans -    The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   outfile -    Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension   token -    Access token
     * @param {String} certIssuerName The name of the PKI certificate issuer
     * @param {String} keyFilePath The client public or private key file path (in case of a private key, it will be use to extract the public key)
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.commonName The common name to be included in the PKI certificate
     * @param {String} opts.altNames The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
     * @param {String} opts.uriSans The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
     * @param {String} opts.outfile Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getPkiCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getPkiCertificate = function(certIssuerName, keyFilePath, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'certIssuerName' is set
      if (certIssuerName === undefined || certIssuerName === null) {
        throw new Error("Missing the required parameter 'certIssuerName' when calling getPkiCertificate");
      }

      // verify the required parameter 'keyFilePath' is set
      if (keyFilePath === undefined || keyFilePath === null) {
        throw new Error("Missing the required parameter 'keyFilePath' when calling getPkiCertificate");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getPkiCertificate");
      }


      var pathParams = {
      };
      var queryParams = {
        'cert-issuer-name': certIssuerName,
        'key-file-path': keyFilePath,
        'common-name': opts['commonName'],
        'alt-names': opts['altNames'],
        'uri-sans': opts['uriSans'],
        'outfile': opts['outfile'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-pki-certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role details
     * Get role details Options:   name -    Role name   token -    Access token
     * @param {String} name Role name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getRole = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getRole");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getRole");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-role', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRsaPublic operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getRsaPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain the public key from a specific RSA private key
     * Obtain the public key from a specific RSA private key Options:   name -    Name of key to be created   token -    Access token
     * @param {String} name Name of key to be created
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getRsaPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getRsaPublic = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getRsaPublic");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getRsaPublic");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-rsa-public', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecretValue operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getSecretValueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get static secret value
     * Get static secret value Options:   name -    Secret name   token -    Access token
     * @param {String} name Secret name
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getSecretValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getSecretValue = function(name, token, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSecretValue");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getSecretValue");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-secret-value', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSshCertificate operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getSshCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates SSH certificate
     * Generates SSH certificate Options:   cert-username -    The username to sign in the SSH certificate   cert-issuer-name -    The name of the SSH certificate issuer   public-key-file-path -    SSH public key   outfile -    Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension   token -    Access token
     * @param {String} certUsername The username to sign in the SSH certificate
     * @param {String} certIssuerName The name of the SSH certificate issuer
     * @param {String} publicKeyFilePath SSH public key
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.outfile Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~getSshCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.getSshCertificate = function(certUsername, certIssuerName, publicKeyFilePath, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'certUsername' is set
      if (certUsername === undefined || certUsername === null) {
        throw new Error("Missing the required parameter 'certUsername' when calling getSshCertificate");
      }

      // verify the required parameter 'certIssuerName' is set
      if (certIssuerName === undefined || certIssuerName === null) {
        throw new Error("Missing the required parameter 'certIssuerName' when calling getSshCertificate");
      }

      // verify the required parameter 'publicKeyFilePath' is set
      if (publicKeyFilePath === undefined || publicKeyFilePath === null) {
        throw new Error("Missing the required parameter 'publicKeyFilePath' when calling getSshCertificate");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getSshCertificate");
      }


      var pathParams = {
      };
      var queryParams = {
        'cert-username': certUsername,
        'cert-issuer-name': certIssuerName,
        'public-key-file-path': publicKeyFilePath,
        'outfile': opts['outfile'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/get-ssh-certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the help operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~helpCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * help text
     * help text
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~helpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.help = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/help', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthMethods operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~listAuthMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all the Auth Methods in the account
     * Returns a list of all the Auth Methods in the account Options:   pagination-token -    Next page reference   token -    Access token
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.paginationToken Next page reference
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~listAuthMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.listAuthMethods = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling listAuthMethods");
      }


      var pathParams = {
      };
      var queryParams = {
        'pagination-token': opts['paginationToken'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/list-auth-methods', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listItems operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~listItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all accessible items
     * Returns a list of all accessible items Options:   type -    The item types list of the requested items. In case it is empty, all types of items will be returned. options- [key, static-secret, dynamic-secret]   ItemsTypes -    ItemsTypes   filter -    Filter by item name or part of it   path -    Path to folder   pagination-token -    Next page reference   token -    Access token
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.type The item types list of the requested items. In case it is empty, all types of items will be returned. options- [key, static-secret, dynamic-secret]
     * @param {String} opts.itemsTypes ItemsTypes
     * @param {String} opts.filter Filter by item name or part of it
     * @param {String} opts.path Path to folder
     * @param {String} opts.paginationToken Next page reference
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~listItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.listItems = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling listItems");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': opts['type'],
        'ItemsTypes': opts['itemsTypes'],
        'filter': opts['filter'],
        'path': opts['path'],
        'pagination-token': opts['paginationToken'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/list-items', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all roles in the account
     * Returns a list of all roles in the account Options:   pagination-token -    Next page reference   token -    Access token
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.paginationToken Next page reference
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.listRoles = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling listRoles");
      }


      var pathParams = {
      };
      var queryParams = {
        'pagination-token': opts['paginationToken'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/list-roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoleRule operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~setRoleRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a rule to a role
     * Set a rule to a role Options:   role-name -    The role name to be updated   path -    The path the rule refers to   capability -    List of the approved/denied capabilities in the path options- [read, create, update, delete, list, deny]   token -    Access token
     * @param {String} roleName The role name to be updated
     * @param {String} path The path the rule refers to
     * @param {String} capability List of the approved/denied capabilities in the path options- [read, create, update, delete, list, deny]
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~setRoleRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.setRoleRule = function(roleName, path, capability, token, callback) {
      var postBody = null;

      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling setRoleRule");
      }

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling setRoleRule");
      }

      // verify the required parameter 'capability' is set
      if (capability === undefined || capability === null) {
        throw new Error("Missing the required parameter 'capability' when calling setRoleRule");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling setRoleRule");
      }


      var pathParams = {
      };
      var queryParams = {
        'role-name': roleName,
        'path': path,
        'capability': capability,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/set-role-rule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signPkcs1 operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~signPkcs1Callback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculates the signature of hashed using RSASSA-PKCS1-V1_5-SIGN from RSA PKCS#1 v1.5
     * Calculates the signature of hashed using RSASSA-PKCS1-V1_5-SIGN from RSA PKCS#1 v1.5 Options:   key-name -    The name of the RSA key to use in the signing process   message -    The message to be signed   token -    Access token
     * @param {String} keyName The name of the RSA key to use in the signing process
     * @param {String} message The message to be signed
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~signPkcs1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.signPkcs1 = function(keyName, message, token, callback) {
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling signPkcs1");
      }

      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling signPkcs1");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling signPkcs1");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'message': message,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/sign-pkcs1', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unconfigure operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~unconfigureCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Configuration of client profile.
     * Remove Configuration of client profile. Options:   token -    Access token
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~unconfigureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.unconfigure = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling unconfigure");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/unconfigure', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a new AKEYLESS CLI version
     * Update a new AKEYLESS CLI version Options:   token -    Access token
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.update = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling update");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update item name and metadata
     * Update item name and metadata Options:   name -    Current item name   new-name -    New item name   new-metadata -    New item metadata   token -    Access token
     * @param {String} name Current item name
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName New item name
     * @param {String} opts.newMetadata New item metadata
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.updateItem = function(name, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateItem");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateItem");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'new-name': opts['newName'],
        'new-metadata': opts['newMetadata'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/update-item', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update role details
     * Update role details Options:   name -    Role name   new-name -    New Role name   new-comment -    New comment about the role   token -    Access token
     * @param {String} name Role name
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName New Role name
     * @param {String} opts.newComment New comment about the role
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.updateRole = function(name, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateRole");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateRole");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'new-name': opts['newName'],
        'new-comment': opts['newComment'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/update-role', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecretVal operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateSecretValCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update static secret value
     * Update static secret value Options:   name -    Secret name   value -    The new secret value   key -    The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)   multiline -    The provided value is a multiline value (separated by '\\n')   token -    Access token
     * @param {String} name Secret name
     * @param {String} value The new secret value
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
     * @param {Boolean} opts.multiline The provided value is a multiline value (separated by '\\n')
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~updateSecretValCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.updateSecretVal = function(name, value, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateSecretVal");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling updateSecretVal");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateSecretVal");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'value': value,
        'key': opts['key'],
        'multiline': opts['multiline'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/update-secret-val', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadPkcs12 operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~uploadPkcs12Callback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a PKCS#12 key and certificates
     * Upload a PKCS#12 key and certificates Options:   name -    Name of key to be created   in -    PKCS#12 input file (private key and certificate only)   passphrase -    Passphrase to unlock the pkcs#12 bundle   metadata -    A metadata about the key   split-level -    The number of fragments that the item will be split into   customer-frg-id -    The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)   cert -    Path to a file that contain the certificate in a PEM format. If this parameter is not empty, the certificate will be taken from here and not from the PKCS#12 input file   token -    Access token
     * @param {String} name Name of key to be created
     * @param {String} _in PKCS#12 input file (private key and certificate only)
     * @param {String} passphrase Passphrase to unlock the pkcs#12 bundle
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.metadata A metadata about the key
     * @param {String} opts.splitLevel The number of fragments that the item will be split into
     * @param {String} opts.customerFrgId The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)
     * @param {String} opts.cert Path to a file that contain the certificate in a PEM format. If this parameter is not empty, the certificate will be taken from here and not from the PKCS#12 input file
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~uploadPkcs12Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.uploadPkcs12 = function(name, _in, passphrase, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling uploadPkcs12");
      }

      // verify the required parameter '_in' is set
      if (_in === undefined || _in === null) {
        throw new Error("Missing the required parameter '_in' when calling uploadPkcs12");
      }

      // verify the required parameter 'passphrase' is set
      if (passphrase === undefined || passphrase === null) {
        throw new Error("Missing the required parameter 'passphrase' when calling uploadPkcs12");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling uploadPkcs12");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'in': _in,
        'passphrase': passphrase,
        'metadata': opts['metadata'],
        'split-level': opts['splitLevel'],
        'customer-frg-id': opts['customerFrgId'],
        'cert': opts['cert'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/upload-pkcs12', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadRsa operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~uploadRsaCallback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload RSA key
     * Upload RSA key Options:   name -    Name of key to be created   alg -    Key type. options- [RSA1024, RSA2048]   rsa-key-file-path -    RSA private key file path   cert -    Path to a file that contain the certificate in a PEM format.   metadata -    A metadata about the key   split-level -    The number of fragments that the item will be split into   customer-frg-id -    The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)   token -    Access token
     * @param {String} name Name of key to be created
     * @param {String} alg Key type. options- [RSA1024, RSA2048]
     * @param {String} rsaKeyFilePath RSA private key file path
     * @param {String} token Access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.cert Path to a file that contain the certificate in a PEM format.
     * @param {String} opts.metadata A metadata about the key
     * @param {String} opts.splitLevel The number of fragments that the item will be split into
     * @param {String} opts.customerFrgId The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~uploadRsaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.uploadRsa = function(name, alg, rsaKeyFilePath, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling uploadRsa");
      }

      // verify the required parameter 'alg' is set
      if (alg === undefined || alg === null) {
        throw new Error("Missing the required parameter 'alg' when calling uploadRsa");
      }

      // verify the required parameter 'rsaKeyFilePath' is set
      if (rsaKeyFilePath === undefined || rsaKeyFilePath === null) {
        throw new Error("Missing the required parameter 'rsaKeyFilePath' when calling uploadRsa");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling uploadRsa");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'alg': alg,
        'rsa-key-file-path': rsaKeyFilePath,
        'cert': opts['cert'],
        'metadata': opts['metadata'],
        'split-level': opts['splitLevel'],
        'customer-frg-id': opts['customerFrgId'],
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/upload-rsa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPkcs1 operation.
     * @callback module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~verifyPkcs1Callback
     * @param {String} error Error message, if any.
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies an RSA PKCS#1 v1.5 signature
     * Verifies an RSA PKCS#1 v1.5 signature Options:   key-name -    The name of the RSA key to use in the verification process   message -    The message to be verified   signature -    The message's signature   token -    Access token
     * @param {String} keyName The name of the RSA key to use in the verification process
     * @param {String} message The message to be verified
     * @param {String} signature The message's signature
     * @param {String} token Access token
     * @param {module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.api/DefaultApi~verifyPkcs1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.akeyless.api_gateway.swagger/com.akeyless.api_gateway.swagger.model/ReplyObj}
     */
    this.verifyPkcs1 = function(keyName, message, signature, token, callback) {
      var postBody = null;

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling verifyPkcs1");
      }

      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling verifyPkcs1");
      }

      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling verifyPkcs1");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling verifyPkcs1");
      }


      var pathParams = {
      };
      var queryParams = {
        'key-name': keyName,
        'message': message,
        'signature': signature,
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReplyObj;

      return this.apiClient.callApi(
        '/verify-pkcs1', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
